// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package repo

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (priority, data, state, job_id)
VALUES (?, ?, ?, ?)
RETURNING id, priority, data, state, created_at, edited_at, job_id
`

type CreateTaskParams struct {
	Priority int64  `json:"priority"`
	Data     string `json:"data"`
	State    string `json:"state"`
	JobID    int64  `json:"job_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Priority,
		arg.Data,
		arg.State,
		arg.JobID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Priority,
		&i.Data,
		&i.State,
		&i.CreatedAt,
		&i.EditedAt,
		&i.JobID,
	)
	return i, err
}

const getNextTask = `-- name: GetNextTask :one
SELECT t.id, t.priority, data, t.state, t.created_at, t.edited_at, job_id, j.id, name, j.priority, j.state, j.created_at, j.edited_at
FROM tasks t
JOIN jobs j ON t.job_id = j.id
WHERE j.priority = (
    SELECT MAX(priority)
    FROM jobs
    WHERE state IN ('progress', 'waiting')
)
AND j.state IN ('progress', 'waiting')
AND t.priority = (
    SELECT MAX(priority)
    FROM tasks
    WHERE state = 'waiting' AND job_id = j.id
)
AND t.state = 'waiting'
ORDER BY t.created_at ASC
LIMIT 1
`

type GetNextTaskRow struct {
	ID          int64     `json:"id"`
	Priority    int64     `json:"priority"`
	Data        string    `json:"data"`
	State       string    `json:"state"`
	CreatedAt   time.Time `json:"created_at"`
	EditedAt    time.Time `json:"edited_at"`
	JobID       int64     `json:"job_id"`
	ID_2        int64     `json:"id_2"`
	Name        string    `json:"name"`
	Priority_2  int64     `json:"priority_2"`
	State_2     string    `json:"state_2"`
	CreatedAt_2 time.Time `json:"created_at_2"`
	EditedAt_2  time.Time `json:"edited_at_2"`
}

func (q *Queries) GetNextTask(ctx context.Context) (GetNextTaskRow, error) {
	row := q.db.QueryRowContext(ctx, getNextTask)
	var i GetNextTaskRow
	err := row.Scan(
		&i.ID,
		&i.Priority,
		&i.Data,
		&i.State,
		&i.CreatedAt,
		&i.EditedAt,
		&i.JobID,
		&i.ID_2,
		&i.Name,
		&i.Priority_2,
		&i.State_2,
		&i.CreatedAt_2,
		&i.EditedAt_2,
	)
	return i, err
}

const updateTaskState = `-- name: UpdateTaskState :exec
UPDATE tasks
SET state = 'progress', edited_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateTaskState(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateTaskState, id)
	return err
}
