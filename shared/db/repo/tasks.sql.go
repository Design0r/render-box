// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package repo

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (priority, data, state, job_id)
VALUES (?, ?, ?, ?)
RETURNING id, priority, data, state, created_at, edited_at, job_id
`

type CreateTaskParams struct {
	Priority int64  `json:"priority"`
	Data     string `json:"data"`
	State    string `json:"state"`
	JobID    int64  `json:"job_id"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Priority,
		arg.Data,
		arg.State,
		arg.JobID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Priority,
		&i.Data,
		&i.State,
		&i.CreatedAt,
		&i.EditedAt,
		&i.JobID,
	)
	return i, err
}

const getNextTask = `-- name: GetNextTask :one
SELECT t.id, t.priority, t.data, t.state, t.created_at, t.edited_at, t.job_id
FROM tasks t
JOIN jobs j ON t.job_id = j.id
WHERE j.priority = (
    SELECT MAX(priority)
    FROM jobs
    WHERE state IN ('progress', 'waiting')
)
AND j.state IN ('progress', 'waiting')
AND t.priority = (
    SELECT MAX(priority)
    FROM tasks
    WHERE state = 'waiting' AND job_id = j.id
)
AND t.state = 'waiting'
ORDER BY t.created_at ASC
LIMIT 1
`

func (q *Queries) GetNextTask(ctx context.Context) (Task, error) {
	row := q.db.QueryRowContext(ctx, getNextTask)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Priority,
		&i.Data,
		&i.State,
		&i.CreatedAt,
		&i.EditedAt,
		&i.JobID,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, priority, data, state, created_at, edited_at, job_id from tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Priority,
			&i.Data,
			&i.State,
			&i.CreatedAt,
			&i.EditedAt,
			&i.JobID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskState = `-- name: UpdateTaskState :one
UPDATE tasks
SET state = ?, edited_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, priority, data, state, created_at, edited_at, job_id
`

type UpdateTaskStateParams struct {
	State string `json:"state"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateTaskState(ctx context.Context, arg UpdateTaskStateParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskState, arg.State, arg.ID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Priority,
		&i.Data,
		&i.State,
		&i.CreatedAt,
		&i.EditedAt,
		&i.JobID,
	)
	return i, err
}
